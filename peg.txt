{  var TYPES_TO_PROPERTY_NAMES = {
    CallExpression:   "callee",
    MemberExpression: "object",
  };
  function filledArray(count, value) {
    return Array.apply(null, new Array(count))
      .map(function() { return value; });
  }
  function extractOptional(optional, index) {
    return optional ? optional[index] : null;
  }
  function extractList(list, index) {
    return list.map(function(element) { return element[index]; });
  }
  function buildList(head, tail, index) {
    return [head].concat(extractList(tail, index));
  }
  function buildBinaryExpression(head, tail) {
    return tail.reduce(function(result, element) {
      return {
        type: "BinaryExpression",
        operator: element[1],
        left: result,
        right: element[3]
      };
    }, head);
  }
  function buildLogicalExpression(head, tail) {
    return tail.reduce(function(result, element) {
      return {
        type: "LogicalExpression",
        operator: element[1],
        left: result,
        right: element[3]
      };
    }, head);
  }
  function optionalList(value) {
    return value !== null ? value : [];
  }
  function parseNumber(n){
    return Number(n.replace(/[Ａ-Ｚａ-ｚ０-９＿]/g,(s)=>{return String.fromCharCode(s.charCodeAt(0) - 0xFEE0)}).replace(/_/g,''))
  }
}
Start = __ プログラム:プログラム __ { return プログラム; }
接続詞 = 'して'
関数助詞 = 'は' / 'を' / 'に' / 'へ' / 'で' / 'と' / 'が' / 'の'
特殊助詞 = 'は' / 'の'
助詞 =   'について' / 'くらい' / 'なのか' / 'までを' / 'までの' /
  'とは' / 'から' / 'まで' / 'だけ' / 'より' / 'ほど' / 'など' /
  'いて' / 'えて' / 'きて' / 'けて' / 'して' / 'って' / 'にて' / 'みて' /
  'めて' / 'ねて' / 'では' / 'には' / 'は!' /
  'は' / 'を' / 'に' / 'へ' / 'で' / 'と' / 'が' / 'の'
たられば = 'でなければ'  / 'ならば' / 'なら' / 'たら' / 'れば'
文末 = 'です'  / 'ます' / 'だ'
キーワード = '関数' / '変数'

機能語 = //機能語とキーワードとの違いは変数の一部に含められるか否か
  助詞 / たられば / 'ここから' / 'ここまで' 
/ 'もし' / 'もしも' / '違えば' / 'エラー監視' / 'エラーならば' / 'どうあれ'
/ '逐次実行' / '先に' / '次に' / '●' / 'とは' 
/ '回' / '反復' / '繰り返す' / '繰返す' / '繰り返' / '繰返' 
/ '取り込む' / '取込む' / '取り込' / '取込' / '取り出す' / '取出す' / '取り出' / '取出' 
/ 'かつ' / 'または'

ハッシュバンコメント = '#!' (!改行 文字)*  ;
コメント = 一行コメント / 範囲コメント ;
一行コメント = 一行コメント識別子 (!改行 文字)*  ;
一行コメント識別子 = Igeta / '※' / Surassyu Surassyu ;
範囲コメント識別子始まり = Surassyu  Asutarisuku ;
範囲コメント識別子終わり = Asutarisuku  Surassyu ;
範囲コメント  = 範囲コメント識別子始まり (!範囲コメント識別子終わり 文字)* 範囲コメント識別子終わり
一行範囲コメント  = 範囲コメント識別子始まり (!(範囲コメント識別子終わり / 改行) 文字)* 範囲コメント識別子終わり

文字 = .
___  = (空白 / コメント / 読点)*

__  = (空白 / 改行記号 / コメント / 読点)*

_
  = (空白 / 一行範囲コメント)*


空白
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"
  / [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

改行
  = [\n\r\u2028\u2029]

改行記号
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"


プログラム = ハッシュバンコメント?   body:文章? {
      return {
        type: "Program",
        block: optionalList(body)
      }
    };
文章 = head:文 tail:(__ 文)* {
      return buildList(head, tail, 1);
    }
EOF  = !.
連文 = 文  接続詞  文

文 = 
//空文から抜ける文までは特定のキーワードで始まる文。続ける文から初期化文までは文の中で使う
  block:空文                         { return block; }
/ block:条件文        文の終わり     { return block; }
/ block:エラー監視文  文の終わり     { return block; }
/ block:逐次実行文    文の終わり     { return block; }
/ block:関数定義文    文の終わり     { return block; }
/ block:戻る文        文の終わり EOS { return block; }
/ block:抜ける文      文の終わり EOS { return block; }
/ block:続ける文      文の終わり EOS { return block; }
/ block:継承文        文の終わり EOS { return block; }
/ block:初期化文      文の終わり EOS { return block; }
/ block:代入文        文の終わり EOS { return block; }
/ block:繰返文        文の終わり EOS { return block; }
/ block:反復文        文の終わり EOS { return block; }
/ block:生成文        文の終わり EOS { return block; }
/ block:取込文        文の終わり EOS { return block; }
/ block:取出文        文の終わり EOS { return block; }
/ block:デバッグ文    文の終わり EOS { return block; }
/ block:関数文        文の終わり EOS { return block; }

;
文の終わり = 
  文末?  句点?  接続詞  __ 
/ 文末?  
;
句点 = '。'
EOS
  = __ Semikoron
  / __ '。'
  / _ 一行コメント? 改行
  / _ &Miginamikakko
  / __ EOF

EOT
  = 読点 Semikoron
  / _ 一行コメント? 改行


まとまり =
  __ 'ここから'? __ block:(段落 __)? 'ここまで'   {      return optionalList(extractOptional(block, 0))    }
/ __ block:文 {      return [block]    };

段落
  = head:文 tail:(__ 文)* { return buildList(head, tail, 1); }
;  

空文 = Semikoron { return { type: "EmptyStatement" } }
/ '。' { return { type: "EmptyStatement" } }
;

条件文 = 
  'もし' 'も'?  sitei:指定部+ jiyo:自余部 {
  sitei.push(jiyo)
  return sitei.reverse().reduce((a, b) => {
    return {
      type: "if",
      test: b[0],
      consequent: b[1],
      alternate: a
    }
  })
}
/ 'もし' 'も'?  sitei:指定部+ {
  return sitei.reverse().reduce((a, b) => {
    return {
      type: "if",
      test: b[0],
      consequent: b[1],
      alternate: a
    }
  })
}
指定部 = __ test:式 __  たられば  consequent:まとまり  { return [test, consequent] };
自余部 = __ '違えば'  alternate:まとまり { return alternate };

エラー監視文 = 
  block:監視部 __ err_block:例外部 __ fin_block:閑話休題部 {
  return {
    type: "try",
    block: block,
    err_block: err_block,
    fin_block: fin_block
  }
}
/ block:監視部 __ err_block:例外部 {
  return {
    type: "try",
    block: block,
    err_block: err_block,
    fin_block: null
  }
}
監視部 = 'エラー監視'   block:まとまり { return block }
例外部 = 'エラーなら' 'ば'?  block:まとまり { return block }
閑話休題部 = 'どうあれ'  block:まとまり { return block }
;

逐次実行文 = 
  '逐次実行'  EOS __ 'ここまで' { 
    return { 
      type: "sequential", 
      block: null
    }
  }
/ '逐次実行'  EOS  __ '先に'  __ head:文  __ tail:( __ '次に'  __ 文)*  __ 'ここまで' { 
    return { 
      type: "sequential", 
      block: buildList(head, tail, 3)
    }
  }
;

関数定義文 = 
  ('●' / '関数'  空白 _ )  Hidarimarukakko  param:(助詞引数 / 列挙引数)?  Migimarukakko  id:名前  'とは'?  EOS  block:まとまり { 
    return { 
      type: "def_func", 
      id: id,
      param: param,
      block: block
    }
  }
/ ('●' / '関数'  空白 _ )  id:名前  Hidarimarukakko  param:(助詞引数 / 列挙引数)?  Migimarukakko  'とは'?  EOS  block:まとまり { 
    return { 
      type: "def_func", 
      id: id,
      param: param,
      block: block
    }
  }
;
助詞引数 = __ args:(名前 助詞 __)+ {
      return args.reduce((a,b)=>{const obj={};obj.id=b[0];obj.josi=b[1];a.push(obj);return a},[]);
    }
列挙引数 = head:式 __ tail:(列挙区切り __ 式 __)* {
      return buildList(head, tail, 2);
    }
列挙区切り = Konma //読点は入れるのかどうか

戻る文 = argument:(式 __ ('を' / 'で'))?  ('戻' / '返')  ('す' / 'る')? { 
    return { 
      type: "return", 
      argument: argument ? argument[0] : null
    }
  };
抜ける文 = '抜ける' { 
    return {       type: "break"    }
  };
続ける文 = '続ける' { 
    return {       type: "continue"    }
  };
継承文 = super_class:変数 'を' __ '継承' { 
    return { 
      type: "extends", 
      super: super_class
    }
  };
初期化文 = //引数のない関数だけ
  callee:関数  'で'  '初期化' { 
    return { 
      type: "constructor",
      block: {
        type: "func",
        callee: callee,
        args: []
      }
    }
  }
/ '初期化' block:まとまり { 
    return { 
      type: "constructor",
      block: block
    }
  }
;

代入文 = 
  left:式左側 __ operator:代入演算子 __ right:式 {
      return {
        type: "let",
        operator: operator,
        left: left,
        right: right
      }
  }
/ block:ローカルスコープ代入文 { return block; }
;

ローカルスコープ代入文 = ローカルスコープ定数代入文 / ローカルスコープ変数代入文 ;
ローカルスコープ定数代入文 = left:名前  'とは'  __ '定数'  right:初期化部? {
      return {
        type: "def_local_var",
        operator: "=",
        left: left,
        vartype: "定数",
        right: right
      }
  }
  / '定数'  空白 _ left:名前  right:初期化部? {
      return {
        type: "def_local_var",
        operator: "=",
        left: left,
        vartype: "定数",
        right: right
      }
  }
;

ローカルスコープ変数代入文 = left:名前  'とは'  __ '変数'  right:初期化部? {
      return {
        type: "def_local_var",
        operator: "=",
        left: left,
        vartype: "変数",
        right: right
      }
  }
  / '変数'  空白 _ left:名前  right:初期化部? {
      return {
        type: "def_local_var",
        operator: "=",
        left: left,
        vartype: "変数",
        right: right
      }
  }
;

代入演算子
  = 'は'
  / Tougou
  / Asutarisuku Tougou
  / kakeru Tougou
  / Surassyu Tougou
  / waru Tougou
  / Paasento Tougou
  / Hatto Tougou
  / Purasu Tougou
  / Mainasu Tougou
  / Anpasando Tougou
  / Hidariyamakakko Hidariyamakakko Tougou
  / Migiyamakakko Migiyamakakko Tougou
  / Migiyamakakko Migiyamakakko Migiyamakakko Tougou


初期化部 = 
  __ Tougou  __ expression:式 { return expression; }
/ __ 'は' __ expression:式 { return expression; }
;

繰返文 = 
  to:式  '回'  block:まとまり { 
    return { 
      type: "repeat", 
      from: null,
      to: to,
      block: block
    }
  }//回を助詞にすべきか
/ variable:(変数  'を')?  __ from:式  __ 'から'  __ to:式  __ 'まで'  __ '繰'  'り'? '返' 'す'?  EOS block:まとまり { 
    return { 
      type: "repeat", 
      from: from,
      to: to,
      variable: variable[0],
      block: block
    }
  }
/ Hidarimarukakko  __ test:式  __ Migimarukakko  'の'  '間'  block:まとまり { 
    return { 
      type: "while", 
      test: test,
      block: block
    }
  }
;

反復文 = 
  variable:変数  'で'  __ target:式  __ 'を'  __ '反復'  EOS  block:まとまり { 
    return { 
      type: "foreach", 
      variable: variable,
      target: target,
      block: block
    }
  }
/ target:式  __ 'を'  __ '反復'  EOS  block:まとまり { 
    return { 
      type: "foreach", 
      variable: null,
      target: target,
      block: block
    }
  }
;

生成文 = callee:関数 args:(Hidarimarukakko 列挙引数 Migimarukakko)? __ 'を' __ '生成' { 
    return { 
      type: "new", 
      callee: callee,
      args: args ? args[1] : null     }
  }

取込文 =
  source:式 __ 'の' __ specifiers:(名前 ('は' / 'を') __ 名前 'で' __)+ '取' 'り'? '込' 'む'? { 
    return { 
      type: "import", 
      source: source,
      specifiers: specifiers.map( e => {
        return {
          id: e[0],
          alias: e[3]
        }
      }),
      alias: null
    }
  }
/ source:式 __ specifiers:('の' __ 名前)?  'を'  __ alias:(名前 'で')? __ '取' 'り'? '込' 'む'? { 
    return { 
      type: "import", 
      source: source,
      specifiers: specifiers === null ? [] :
        [
          {
            id:specifiers[2],
            alias:null
          }
        ],
      alias: alias ? alias[0] : null
    }
  }
;

取出文 =
  source:式 __ 'の' __ specifiers:(名前 ('は' / 'を') __ 名前 'で' __)+ '取' 'り'? '出' 'す'? { 
    return { 
      type: "export", 
      source: source,
      specifiers: specifiers.map( e => {
        return {
          id: e[0],
          alias: e[3]
        }
      }),
      alias: null
    }
  }
/ source:式 __ specifiers:('の' __ 名前)?  'を'  __ alias:(名前 'で')? __ '取' 'り'? '出' 'す'? { 
    return { 
      type: "export", 
      source: source,
      specifiers: specifiers === null ? [] :
        [
          {
            id:specifiers[2],
            alias:null
          }
        ],
      alias: alias[0]
    }
  }
;


関数文 = 
  なでしこ関数文
/ 列挙関数文 
/ 無名関数を引数に取る関数文 
;

なでしこ関数文 = args:文節*  __ suuti? callee:関数 {
        return { type: "func", callee: callee, arguments: args };
        }
文節 = head:式  body:助詞 __ {head.josi=body;return head}

列挙関数文 = calle:関数 Hidarimarukakko args:列挙引数 Migimarukakko
無名関数を引数に取る関数文 = 関数  'に'?   'は'  ( '('  (引数  (助詞 / Konma))*  ')' )?  文  'ここまで' ;

デバッグ文 = 'ブレイクポイント' {        return { type: "debugger" }        }

送り仮名= ひらがな+ ;

引数 = Hidarimarukakko  式  ((Konma / 読点)  式)* Migimarukakko ;
読点 = '、' ;







基本式
  = 'それ' {
      return {
        type: "word",
        value: "それ"
      }
    }
  / 'これ' {
      return {
        type: "word",
        value: "これ"
      }
    }
  / 変数 
  / 値 
  / 配列 
  / オブジェクト 
  / Hidarimarukakko  expression:式  Migimarukakko { return expression; }

参照式
  = head:(
        基本式
      )
    tail:(
       Hidarikakukakko property:式 __ Migikakukakko {
          return { property: property, computed: true };
        }
      / '【' property:式 __  '】' {
          return { property: property, computed: true };
        }
      / 参照記号  property:(名前 / 数字) {
          return { property: property, computed: false };
        }
    )* {
      return tail.reduce(function(result, element) {
        return {
          type: "MemberExpression",
          object: result,
          property: element.property,
          computed: element.computed
        };
      }, head);
    }
;
参照記号 =  Attomaaku ;


呼出式
  = head:(
      callee:参照式 ___ args:引数 {
        return { type: "CallExpression", callee: callee, arguments: args };
        }
      ) 
    tail:(
        ___  Hidarimarukakko args:引数 Migimarukakko {
          return { type: "CallExpression", arguments: args };
        }
      / Hidarikakukakko property:式 __ Migikakukakko {
          return {
            type: "MemberExpression",
            property: property,
            computed: true
          };
        }
      / '【' property:式 __  '】' {
          return {
            type: "MemberExpression",
            property: property,
            computed: true
          };
        }
      / 参照記号  property:(名前 / 数字) {
          return {
            type: "MemberExpression",
            property: property,
            computed: false
          };
        }
    )* {
      return tail.reduce(function(result, element) {
        element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;

        return element;
      }, head);
    }
;

式左側
  = 呼出式
  / 参照式


前置式
  = 式左側
  / operator:単項演算子 __ argument:前置式 {
      "UnaryExpression";

      return {
        type: "UnaryExpression",
        operator: operator,
        argument: argument,
        prefix: true
      };
    }
;
zentienzansi = 単項演算子 ; //@zentienzansi

単項演算子 //@tankouenzansi
  = $(Purasu !Tougou)
  / $(Mainasu !Tougou)
  / Hitei
  / Kantanhu
  ;

乗除式
  = head:前置式
    tail:(__ 乗除演算子 __ 前置式)* { return buildBinaryExpression(head, tail); }
;
乗除演算子
  = $(Asutarisuku !Tougou)
  / $(kakeru !Tougou)
  / $(Surassyu !Tougou)
  / $(waru !Tougou)
  / $(Paasento !Tougou)
  / $(Hatto !Tougou)

加減式
  = head:乗除式
    tail:(__ 加減演算子 __ 乗除式)* { return buildBinaryExpression(head, tail); }
;
加減演算子
  = $(Purasu !Tougou)
  / $(Mainasu !Tougou)
  ;

連結式
  = head:加減式
    tail:(__ 連結演算子 __ 加減式)* { return buildBinaryExpression(head, tail); }

連結演算子
  = $(Anpasando !Tougou)
  ;

ビットシフト式
  = head:連結式
    tail:(__ ビットシフト演算子 __ 連結式)* { return buildBinaryExpression(head, tail); }
;

ビットシフト演算子
  = $(Hidariyamakakko  Hidariyamakakko  !Tougou)
  / $(Migiyamakakko  Migiyamakakko  !Tougou)
  / $(Migiyamakakko  Migiyamakakko  Migiyamakakko  !Tougou)

比較式
  = head:ビットシフト式
    tail:(__ 比較演算子 __ ビットシフト式)* { return buildBinaryExpression(head, tail); }
;
比較演算子
  = Hidariyamakakko  Tougou
  / Tougou  Hidariyamakakko
  / ikoorusyounari
  / ikoorudainari
  / Migiyamakakko  Tougou
  / Tougou  Migiyamakakko
  / $(Hidariyamakakko !(Hidariyamakakko / Migiyamakakko))
  / $(Migiyamakakko !Migiyamakakko)


等価式
  = head:比較式
    tail:(__ 等価演算子 __ 比較式)* { return buildBinaryExpression(head, tail); }
;
等価演算子
  = Tougou
  / Tougou  Tougou
  / nottoikooru
  / Hidariyamakakko  Migiyamakakko
  / Kantanhu  Tougou


論理積式
  = head:等価式
    tail:(__ 論理積演算子 __ 等価式)* { return buildLogicalExpression(head, tail); }
;
論理積演算子
  = Anpasando  Anpasando / 'かつ'

論理和式
  = head:論理積式
    tail:(__ 論理和演算子 __ 論理積式)* { return buildLogicalExpression(head, tail); }
;
論理和演算子
  = Baatexikarubaa  Baatexikarubaa / 'または'

式 = head:論理和式 {
      return head;
    };

値 = ヌル / 真偽 / suuti / 文字列
;

配列
  = "[" __ elision:(配列要略 __)? "]"  {
      return {
        type: "ArrayExpression",
        elements: optionalList(extractOptional(elision, 0))
      }
    }
  / "[" __ elements:配列要素 __ "]" {
      return {
        type: "ArrayExpression",
        elements: elements
      }
    }
  / "[" __ elements:配列要素 __ ',' __ elision:(配列要略 __)? "]" {
      return {
        type: "ArrayExpression",
        elements: elements.concat(optionalList(extractOptional(elision, 0)))
      }
    }

配列要素
  = head:(
      elision:(配列要略 __)? element:式 {
        return optionalList(extractOptional(elision, 0)).concat(element);
      }
    )
    tail:(
      __ ',' __ elision:(配列要略 __)? element:式 {
        return optionalList(extractOptional(elision, 0)).concat(element);
      }
    )*
    { return Array.prototype.concat.apply(head, tail); }

//elisionがelementと最初をかけていたので
配列要略
  = ',' commas:(__ ',')* { return filledArray(commas.length + 1, null); }


オブジェクト = "{"   "}" { return { type: "ObjectExpression", properties: [] }; }
  / "{"   properties:属性一覧 __ ','? "}" {
       return { type: "ObjectExpression", properties: properties }
     }

属性一覧 = head:属性割り当て tail:(__ ',' __ 属性割り当て)* {
      return buildList(head, tail, 3);
    }

属性割り当て
  = key:属性名 __ ":" __ value:式 {
      return { type: "Property", key: key, value: value, kind: "init" };
    }
    / Hidarikakukakko  key:式  Migikakukakko  Koron value:式 {
      return { type: "Property",computed: true, key: key, value: value, kind: "init" };
    }
//    / 属性名 '(' 引数?  ')'  '{' 文* '}'  
    ;

属性名 = 名前
    / 文字列
    / suuti
    ;



kakeru = '×' ; //@kakeru
waru = '÷' ; //@waru
ikoorudainari = '≧' ; //@ikoorudainari
ikoorusyounari = '≦' ; //@ikoorusyounari
nottoikooru = '≠' ; //@nottoikooru


ヌル = hikubetuenu  hikubetuyuu  hikubetuelu  hikubetuelu { return { type: "Literal", value: null }  };
真偽 = 真 / 偽 ;
真 = '真'  / hikubetutexii  hikubetuarru  hikubetuyuu  hikubetuii { return { type: "Literal", value: true  }  };
偽 = '偽'  / hikubetuefu  hikubetuee  hikubetuelu  hikubetuesu  hikubetuii { return { type: "Literal", value: false }  };

suuti = //@suuti
  literal:非数       (&機能語 / !(名前始 / jussinsuuketa)) {
      return literal;
    }
/ literal:無限大     (&機能語 / !(名前始 / jussinsuuketa)) {
      return literal;
    }
/ literal:二進数     (&機能語 / !(名前始 / jussinsuuketa)) {
      return literal;
    }
/ literal:八進数     (&機能語 / !(名前始 / jussinsuuketa)) {
      return literal;
    }
/ literal:十六進数   (&機能語 / !(名前始 / jussinsuuketa)) {
      return literal;
    }
/ literal:jussinsuu     (&機能語 / !(名前始 / jussinsuuketa)) {
      return literal;
    }; 

jussinsuu = //@jussinsuu
  seisuu  '.'  seisuu*  sisuubu* {
      return { type: "Literal", value: parseNumber(text()) }
     }
/ '.'  seisuu  sisuubu* {
      return { type: "Literal", value: parseNumber(text()) }
     }
/ seisuu  sisuubu* {
      return { type: "Literal", value: parseNumber(text()) }
     };

seisuu = jussinsuuketa+  (suutikugirimoji  jussinsuuketa+)* ; //@seisuu
sisuubu = hikubetuii  purasukamainasu*   seisuu ; //@sisuubu
十六進数 = Zero  hikubetuekkusu  juurokusinsuuketa+  (suutikugirimoji  juurokusinsuuketa+)* {
      return { type: "Literal", value: parseNumber(text()) }
     }; //@juurokusinsuu
八進数 = Zero  hikubetuoo  hassinsuuketa+  (suutikugirimoji  hassinsuuketa+)* {
      return { type: "Literal", value: parseNumber(text()) }
     }; //@hassinsuu
二進数 = Zero  hikubetubii  nisinsuuketa+  (suutikugirimoji  nisinsuuketa+)* {
      return { type: "Literal", value: parseNumber(text()) }
     }; //@nisinsuu


juurokusinsuuketa = Zero / Iti / Ni / San / Yon / Go / Roku / Nana / Hati / Kyuu / hikubetuee / hikubetubii / hikubetusuxii / hikubetudexii / hikubetuii / hikubetuefu ; //@juurokusinsuuketa
jussinsuuketa = Zero / Iti / Ni / San / Yon / Go / Roku / Nana / Hati / Kyuu ; //@jussinsuuketa
hassinsuuketa = Zero / Iti / Ni / San / Yon / Go / Roku / Nana ; //@hassinsuuketa
nisinsuuketa = Zero / Iti ; //@nisinsuuketa


purasukamainasu = Purasu / Mainasu ; //@purasukamainasu
suutikugirimoji = Andaabaa ; //@suutikugirimoji
非数 = '非数' {
      return NaN;
    }; //@hisuu
無限大 = '無限大' {
      return Infinity;
    }; //@mugendai

文字列 = 
  埋め込み文字列 
/ 展開文字列 
/ 非展開文字列 
;

埋め込み文字列 = daijei daiesu  Hidarinamikakko  Hidarinamikakko  Hidarinamikakko  string:三連波括弧文字列中身  Miginamikakko  Miginamikakko  Miginamikakko {
      return { type: "Literal", value: string }
     }; //@umekomimojiretu
展開文字列 = 
  S展開文字列
/ 文字列展開文字列
/ 鉤括弧展開文字列
/ 一重引用符文字列
/ アポストロフィ文字列
;

S展開文字列 = 'S'  Hidarinamikakko Hidarinamikakko Hidarinamikakko elements:(tenkaibu / 三連波括弧文字列中身)*  Miginamikakko Miginamikakko Miginamikakko {
      return { type: "TemplateLiteral", quasis: elements }
     }
文字列展開文字列 = '文字列'  Hidarinamikakko  Hidarinamikakko  Hidarinamikakko  elements:(tenkaibu / 三連波括弧文字列中身)*  Miginamikakko  Miginamikakko  Miginamikakko {
      return { type: "TemplateLiteral", quasis: elements }
     }
鉤括弧展開文字列 = '「'  elements:(tenkaibu / 鉤括弧展開文字列中身)*  '」' {
      return { type: "TemplateLiteral", quasis: elements }
     }
一重引用符文字列 = Itijuuinyouhu  elements:(tenkaibu / 一重引用符展開文字列中身)*  Itijuuinyouhu //;展開文字列
アポストロフィ文字列 = '’'  elements:(tenkaibu / アポストロフィ展開文字列中身)*  '’' {
      return { type: "TemplateLiteral", quasis: elements }
     }//Microsoft IME用


三連波括弧文字列中身 = 三連波括弧文字列文字+ {      return text()     };
三連波括弧文字列文字 = !(Miginamikakko  Miginamikakko  Miginamikakko) . {      return text()     };
鉤括弧展開文字列中身 = 鉤括弧展開文字列文字+ {      return text()     }
鉤括弧展開文字列文字 = !'」' . {      return text()     }
一重引用符展開文字列中身 = 一重引用符展開文字列文字+ {      return text()     }
一重引用符展開文字列文字 = !Itijuuinyouhu . {      return text()     }
アポストロフィ展開文字列中身 = アポストロフィ展開文字列文字+ {      return text()     }
アポストロフィ展開文字列文字 = !'’' . {      return text()     }

非展開文字列 = '『'  chars:二重括弧文字*  '』' {
      return { type: "Literal", value: chars.join("") }
     }
/ 'R'  Hidarinamikakko  Hidarinamikakko  Hidarinamikakko  string:三連波括弧文字列中身  Miginamikakko  Miginamikakko  Miginamikakko {
      return { type: "Literal", value: string }
     }
/ '“'  chars:左右二重引用符文字*  '”' {
      return { type: "Literal", value: chars.join("") }
     }
/ Nijuuinyouhu  chars:同一二重引用符文字*  Nijuuinyouhu {
      return { type: "Literal", value: chars.join("") }
     }
;
二重括弧文字 = !'』' . {      return text()     }
左右二重引用符文字 = !'”' . {      return text()     }
同一二重引用符文字 = !Nijuuinyouhu . {      return text()     }

tenkaibu = Hidarinamikakko  式  Miginamikakko ; //@tenkaibu


変数 = name:名前 {
      return {
        type: "word",
        value: name
      }
    };
関数 = 変数 ;

識別子
  = !予約語 name:名前 { return name; }

予約語 = ヌル / 真偽 / キーワード

名前
  = head:名前始 tail:名前続* { return head + tail.join("") }

名前始
  = Yunikoodo
  / !機能語 ひらがな { return text(); }
  / [$_]
//  / "\\" sequence:UnicodeEscapeSequence { return sequence; }

名前続
  = Yunikoodo
  / 数字
  / !機能語 ひらがな+ { return text(); }



Kantanhu = '!' / '！' ; //@Kantanhu
Nijuuinyouhu = '"' / '＂' ; //@Nijuuinyouhu
Igeta = '#' / '＃' ; //@Igeta
Doru = '$' / '＄' ; //@Doru
Paasento = '%' / '％' ; //@Paasento
Anpasando = '&' / '＆' ; //@Anpasando
Itijuuinyouhu = '\'' / '＇' ; //@Itijuuinyouhu
Hidarimarukakko = '(' / '（' ; //@Hidarimarukakko
Migimarukakko = ')' / '）' ; //@Migimarukakko
Asutarisuku = '*' / '＊' ; //@Asutarisuku
Purasu = '+' / '＋' ; //@Purasu
Konma = ',' / '，' ; //@Konma
//Mainasu = '-' / '－'
Piriodo = '.' / '．' ; //@Piriodo
Surassyu = '/' / '／' ; //@Surassyu
Zero = '0' / '０' ; //@Zero
Iti = '1' / '１' ; //@Iti
Ni = '2' / '２' ; //@Ni
San = '3' / '３' ; //@San
Yon = '4' / '４' ; //@Yon
Go = '5' / '５' ; //@Go
Roku = '6' / '６' ; //@Roku
Nana = '7' / '７' ; //@Nana
Hati = '8' / '８' ; //@Hati
Kyuu = '9' / '９' ; //@Kyuu
Koron = ':' / '：' ; //@Koron
Semikoron = ';' / '；' ; //@Semikoron
Hidariyamakakko = '<' / '＜' ; //@Hidariyamakakko
Tougou = '=' / '＝' ; //@Tougou
Migiyamakakko = '>' / '＞' ; //@Migiyamakakko
Gimonhu = '?' / '？' ; //@Gimonhu
Attomaaku = '@' / '＠' ; //@Attomaaku
daiee = 'A' / 'Ａ' ; //@daiee
daibii = 'B' / 'Ｂ' ; //@daibii
daisuxii = 'C' / 'Ｃ' ; //@daisuxii
daidexii = 'D' / 'Ｄ' ; //@daidexii
daiii = 'E' / 'Ｅ' ; //@daiii
daiefu = 'F' / 'Ｆ' ; //@daiefu
daigii = 'G' / 'Ｇ' ; //@daigii
daiheiti = 'H' / 'Ｈ' ; //@daiheiti
daiai = 'I' / 'Ｉ' ; //@daiai
daijei = 'J' / 'Ｊ' ; //@daijei
daikei = 'K' / 'Ｋ' ; //@daikei
daielu = 'L' / 'Ｌ' ; //@daielu
daiemu = 'M' / 'Ｍ' ; //@daiemu
daienu = 'N' / 'Ｎ' ; //@daienu
daioo = 'O' / 'Ｏ' ; //@daioo
daipii = 'P' / 'Ｐ' ; //@daipii
daiquu = 'Q' / 'Ｑ' ; //@daiquu
daiarru = 'R' / 'Ｒ' ; //@daiarru
daiesu = 'S' / 'Ｓ' ; //@daiesu
daitexii = 'T' / 'Ｔ' ; //@daitexii
daiyuu = 'U' / 'Ｕ' ; //@daiyuu
daivui = 'V' / 'Ｖ' ; //@daivui
daidaburyuu = 'W' / 'Ｗ' ; //@daidaburyuu
daiekkusu = 'X' / 'Ｘ' ; //@daiekkusu
daiwai = 'Y' / 'Ｙ' ; //@daiwai
daizeddo = 'Z' / 'Ｚ' ; //@daizeddo
Hidarikakukakko = '[' / '［' ; //@Hidarikakukakko
Bakkusurassyu = '\\' / '＼' ; //@Bakkusurassyu
Migikakukakko = ']' / '］' ; //@Migikakukakko
Hatto = '^' / '＾' ; //@Hatto
Andaabaa = '_' / '＿' ; //@Andaabaa
Bakkukuooto = '`' / '｀' ; //@Bakkukuooto
syouee = 'a' / 'ａ' ; //@syouee
syoubii = 'b' / 'ｂ' ; //@syoubii
syousuxii = 'c' / 'ｃ' ; //@syousuxii
syoudexii = 'd' / 'ｄ' ; //@syoudexii
syouii = 'e' / 'ｅ' ; //@syouii
syouefu = 'f' / 'ｆ' ; //@syouefu
syougii = 'g' / 'ｇ' ; //@syougii
syouheiti = 'h' / 'ｈ' ; //@syouheiti
syouai = 'i' / 'ｉ' ; //@syouai
syoujei = 'j' / 'ｊ' ; //@syoujei
syoukei = 'k' / 'ｋ' ; //@syoukei
syouelu = 'l' / 'ｌ' ; //@syouelu
syouemu = 'm' / 'ｍ' ; //@syouemu
syouenu = 'n' / 'ｎ' ; //@syouenu
syouoo = 'o' / 'ｏ' ; //@syouoo
syoupii = 'p' / 'ｐ' ; //@syoupii
syouquu = 'q' / 'ｑ' ; //@syouquu
syouarru = 'r' / 'ｒ' ; //@syouarru
syouesu = 's' / 'ｓ' ; //@syouesu
syoutexii = 't' / 'ｔ' ; //@syoutexii
syouyuu = 'u' / 'ｕ' ; //@syouyuu
syouvui = 'v' / 'ｖ' ; //@syouvui
syoudaburyuu = 'w' / 'ｗ' ; //@syoudaburyuu
syouekkusu = 'x' / 'ｘ' ; //@syouekkusu
syouwai = 'y' / 'ｙ' ; //@syouwai
syouzeddo = 'z' / 'ｚ' ; //@syouzeddo
Hidarinamikakko = '{' / '｛' ; //@Hidarinamikakko
Baatexikarubaa = '|' / '｜' ; //@Baatexikarubaa
Miginamikakko = '}' / '｝' ; //@Miginamikakko
Hitei = Tiruda ; //@Hitei
Mainasu = Haihun / Tyouonhu ; //@Mainasu@
hikubetuee = syouee / daiee ; //@hikubetuee
hikubetubii = syoubii / daibii ; //@hikubetubii
hikubetusuxii = syousuxii / daisuxii ; //@hikubetusuxii
hikubetudexii = syoudexii / daidexii ; //@hikubetudexii
hikubetuii = syouii / daiii ; //@hikubetuii
hikubetuefu = syouefu / daiefu ; //@hikubetuefu
hikubetugii = syougii / daigii ; //@hikubetugii
hikubetuheiti = syouheiti / daiheiti ; //@hikubetuheiti
hikubetuai = syouai / daiai ; //@hikubetuai
hikubetujei = syoujei / daijei ; //@hikubetujei
hikubetukei = syoukei / daikei ; //@hikubetukei
hikubetuelu = syouelu / daielu ; //@hikubetuelu
hikubetuemu = syouemu / daiemu ; //@hikubetuemu
hikubetuenu = syouenu / daienu ; //@hikubetuenu
hikubetuoo = syouoo / daioo ; //@hikubetuoo
hikubetupii = syoupii / daipii ; //@hikubetupii
hikubetuquu = syouquu / daiquu ; //@hikubetuquu
hikubetuarru = syouarru / daiarru ; //@hikubetuarru
hikubetuesu = syouesu / daiesu ; //@hikubetuesu
hikubetutexii = syoutexii / daitexii ; //@hikubetutexii
hikubetuyuu = syouyuu / daiyuu ; //@hikubetuyuu
hikubetuvui = syouvui / daivui ; //@hikubetuvui
hikubetudaburyuu = syoudaburyuu / daidaburyuu ; //@hikubetudaburyuu
hikubetuekkusu = syouekkusu / daiekkusu ; //@hikubetuekkusu
hikubetuwai = syouwai / daiwai ; //@hikubetuwai
hikubetuzeddo = syouzeddo / daizeddo ; //@hikubetuzeddo

HangakuKantanhu = '!'  ; //@HangakuKantanhu
HangakuNijuuinyouhu = '"'  ; //@HangakuNijuuinyouhu
HangakuIgeta = '#'  ; //@HangakuIgeta
HangakuDoru = '$'  ; //@HangakuDoru
HangakuPaasento = '%'  ; //@HangakuPaasento
HangakuAnpasando = '&'  ; //@HangakuAnpasando
HangakuItijuuinyouhu = '\'' ; //@HangakuItijuuinyouhu
HangakuHidarimarukakko = '('  ; //@HangakuHidarimarukakko
HangakuMigimarukakko = ')'  ; //@HangakuMigimarukakko
HangakuAsutarisuku = '*'  ; //@HangakuAsutarisuku
HangakuPurasu = '+'  ; //@HangakuPurasu
HangakuKonma = ','  ; //@HangakuKonma
HangakuPiriodo = '.'  ; //@HangakuPiriodo
HangakuSurassyu = '/'  ; //@HangakuSurassyu
HangakuZero = '0'  ; //@HangakuZero
HangakuIti = '1'  ; //@HangakuIti
HangakuNi = '2'  ; //@HangakuNi
HangakuSan = '3'  ; //@HangakuSan
HangakuYon = '4'  ; //@HangakuYon
HangakuGo = '5'  ; //@HangakuGo
HangakuRoku = '6'  ; //@HangakuRoku
HangakuNana = '7'  ; //@HangakuNana
HangakuHati = '8'  ; //@HangakuHati
HangakuKyuu = '9'  ; //@HangakuKyuu
HangakuKoron = ':'  ; //@HangakuKoron
HangakuSemikoron = ';'  ; //@HangakuSemikoron
HangakuHidariyamakakko = '<'  ; //@HangakuHidariyamakakko
HangakuTougou = '='  ; //@HangakuTougou
HangakuMigiyamakakko = '>'  ; //@HangakuMigiyamakakko
HangakuGimonhu = '?'  ; //@HangakuGimonhu
HangakuAttomaaku = '@'  ; //@HangakuAttomaaku
Hangakudaiee = 'A'  ; //@Hangakudaiee
Hangakudaibii = 'B'  ; //@Hangakudaibii
Hangakudaisuxii = 'C'  ; //@Hangakudaisuxii
Hangakudaidexii = 'D'  ; //@Hangakudaidexii
Hangakudaiii = 'E'  ; //@Hangakudaiii
Hangakudaiefu = 'F'  ; //@Hangakudaiefu
Hangakudaigii = 'G'  ; //@Hangakudaigii
Hangakudaiheiti = 'H'  ; //@Hangakudaiheiti
Hangakudaiai = 'I'  ; //@Hangakudaiai
Hangakudaijei = 'J'  ; //@Hangakudaijei
Hangakudaikei = 'K'  ; //@Hangakudaikei
Hangakudaielu = 'L'  ; //@Hangakudaielu
Hangakudaiemu = 'M'  ; //@Hangakudaiemu
Hangakudaienu = 'N'  ; //@Hangakudaienu
Hangakudaioo = 'O'  ; //@Hangakudaioo
Hangakudaipii = 'P'  ; //@Hangakudaipii
Hangakudaiquu = 'Q'  ; //@Hangakudaiquu
Hangakudaiarru = 'R'  ; //@Hangakudaiarru
Hangakudaiesu = 'S'  ; //@Hangakudaiesu
Hangakudaitexii = 'T'  ; //@Hangakudaitexii
Hangakudaiyuu = 'U'  ; //@Hangakudaiyuu
Hangakudaivui = 'V'  ; //@Hangakudaivui
Hangakudaidaburyuu = 'W'  ; //@Hangakudaidaburyuu
Hangakudaiekkusu = 'X'  ; //@Hangakudaiekkusu
Hangakudaiwai = 'Y'  ; //@Hangakudaiwai
Hangakudaizeddo = 'Z'  ; //@Hangakudaizeddo
HangakuHidarikakukakko = '['  ; //@HangakuHidarikakukakko
HangakuBakkusurassyu = '\\' ; //@HangakuBakkusurassyu
HangakuMigikakukakko = ']'  ; //@HangakuMigikakukakko
HangakuHatto = '^'  ; //@HangakuHatto
HangakuAndaabaa = '_'  ; //@HangakuAndaabaa
HangakuBakkukuooto = '`'  ; //@HangakuBakkukuooto
Hangakusyouee = 'a'  ; //@Hangakusyouee
Hangakusyoubii = 'b'  ; //@Hangakusyoubii
Hangakusyousuxii = 'c'  ; //@Hangakusyousuxii
Hangakusyoudexii = 'd'  ; //@Hangakusyoudexii
Hangakusyouii = 'e'  ; //@Hangakusyouii
Hangakusyouefu = 'f'  ; //@Hangakusyouefu
Hangakusyougii = 'g'  ; //@Hangakusyougii
Hangakusyouheiti = 'h'  ; //@Hangakusyouheiti
Hangakusyouai = 'i'  ; //@Hangakusyouai
Hangakusyoujei = 'j'  ; //@Hangakusyoujei
Hangakusyoukei = 'k'  ; //@Hangakusyoukei
Hangakusyouelu = 'l'  ; //@Hangakusyouelu
Hangakusyouemu = 'm'  ; //@Hangakusyouemu
Hangakusyouenu = 'n'  ; //@Hangakusyouenu
Hangakusyouoo = 'o'  ; //@Hangakusyouoo
Hangakusyoupii = 'p'  ; //@Hangakusyoupii
Hangakusyouquu = 'q'  ; //@Hangakusyouquu
Hangakusyouarru = 'r'  ; //@Hangakusyouarru
Hangakusyouesu = 's'  ; //@Hangakusyouesu
Hangakusyoutexii = 't'  ; //@Hangakusyoutexii
Hangakusyouyuu = 'u'  ; //@Hangakusyouyuu
Hangakusyouvui = 'v'  ; //@Hangakusyouvui
Hangakusyoudaburyuu = 'w'  ; //@Hangakusyoudaburyuu
Hangakusyouekkusu = 'x'  ; //@Hangakusyouekkusu
Hangakusyouwai = 'y'  ; //@Hangakusyouwai
Hangakusyouzeddo = 'z'  ; //@Hangakusyouzeddo
HangakuHidarinamikakko = '{'  ; //@HangakuHidarinamikakko
HangakuBaatexikarubaa = '|'  ; //@HangakuBaatexikarubaa
HangakuMiginamikakko = '}'  ; //@HangakuMiginamikakko

ZengakuKantanhu =  '！' ; //@ZengakuKantanhu
ZengakuNijuuinyouhu =  '＂' ; //@ZengakuNijuuinyouhu
ZengakuIgeta =  '＃' ; //@ZengakuIgeta
ZengakuDoru =  '＄' ; //@ZengakuDoru
ZengakuPaasento =  '％' ; //@ZengakuPaasento
ZengakuAnpasando =  '＆' ; //@ZengakuAnpasando
ZengakuItijuuinyouhu =  '＇' ; //@ZengakuItijuuinyouhu
ZengakuHidarimarukakko =  '（' ; //@ZengakuHidarimarukakko
ZengakuMigimarukakko =  '）' ; //@ZengakuMigimarukakko
ZengakuAsutarisuku =  '＊' ; //@ZengakuAsutarisuku
ZengakuPurasu =  '＋' ; //@ZengakuPurasu
ZengakuKonma =  '，' ; //@ZengakuKonma
ZengakuPiriodo =  '．' ; //@ZengakuPiriodo
ZengakuSurassyu =  '／' ; //@ZengakuSurassyu
ZengakuZero =  '０' ; //@ZengakuZero
ZengakuIti =  '１' ; //@ZengakuIti
ZengakuNi =  '２' ; //@ZengakuNi
ZengakuSan =  '３' ; //@ZengakuSan
ZengakuYon =  '４' ; //@ZengakuYon
ZengakuGo =  '５' ; //@ZengakuGo
ZengakuRoku =  '６' ; //@ZengakuRoku
ZengakuNana =  '７' ; //@ZengakuNana
ZengakuHati =  '８' ; //@ZengakuHati
ZengakuKyuu =  '９' ; //@ZengakuKyuu
ZengakuKoron =  '：' ; //@ZengakuKoron
ZengakuSemikoron =  '；' ; //@ZengakuSemikoron
ZengakuHidariyamakakko =  '＜' ; //@ZengakuHidariyamakakko
ZengakuTougou =  '＝' ; //@ZengakuTougou
ZengakuMigiyamakakko =  '＞' ; //@ZengakuMigiyamakakko
ZengakuGimonhu =  '？' ; //@ZengakuGimonhu
ZengakuAttomaaku =  '＠' ; //@ZengakuAttomaaku
Zengakudaiee =  'Ａ' ; //@Zengakudaiee
Zengakudaibii =  'Ｂ' ; //@Zengakudaibii
Zengakudaisuxii =  'Ｃ' ; //@Zengakudaisuxii
Zengakudaidexii =  'Ｄ' ; //@Zengakudaidexii
Zengakudaiii =  'Ｅ' ; //@Zengakudaiii
Zengakudaiefu =  'Ｆ' ; //@Zengakudaiefu
Zengakudaigii =  'Ｇ' ; //@Zengakudaigii
Zengakudaiheiti =  'Ｈ' ; //@Zengakudaiheiti
Zengakudaiai =  'Ｉ' ; //@Zengakudaiai
Zengakudaijei =  'Ｊ' ; //@Zengakudaijei
Zengakudaikei =  'Ｋ' ; //@Zengakudaikei
Zengakudaielu =  'Ｌ' ; //@Zengakudaielu
Zengakudaiemu =  'Ｍ' ; //@Zengakudaiemu
Zengakudaienu =  'Ｎ' ; //@Zengakudaienu
Zengakudaioo =  'Ｏ' ; //@Zengakudaioo
Zengakudaipii =  'Ｐ' ; //@Zengakudaipii
Zengakudaiquu =  'Ｑ' ; //@Zengakudaiquu
Zengakudaiarru =  'Ｒ' ; //@Zengakudaiarru
Zengakudaiesu =  'Ｓ' ; //@Zengakudaiesu
Zengakudaitexii =  'Ｔ' ; //@Zengakudaitexii
Zengakudaiyuu =  'Ｕ' ; //@Zengakudaiyuu
Zengakudaivui =  'Ｖ' ; //@Zengakudaivui
Zengakudaidaburyuu =  'Ｗ' ; //@Zengakudaidaburyuu
Zengakudaiekkusu =  'Ｘ' ; //@Zengakudaiekkusu
Zengakudaiwai =  'Ｙ' ; //@Zengakudaiwai
Zengakudaizeddo =  'Ｚ' ; //@Zengakudaizeddo
ZengakuHidarikakukakko =  '［' ; //@ZengakuHidarikakukakko
ZengakuBakkusurassyu =  '＼' ; //@ZengakuBakkusurassyu
ZengakuMigikakukakko =  '］' ; //@ZengakuMigikakukakko
ZengakuHatto =  '＾' ; //@ZengakuHatto
ZengakuAndaabaa =  '＿' ; //@ZengakuAndaabaa
ZengakuBakkukuooto =  '｀' ; //@ZengakuBakkukuooto
Zengakusyouee =  'ａ' ; //@Zengakusyouee
Zengakusyoubii =  'ｂ' ; //@Zengakusyoubii
Zengakusyousuxii =  'ｃ' ; //@Zengakusyousuxii
Zengakusyoudexii =  'ｄ' ; //@Zengakusyoudexii
Zengakusyouii =  'ｅ' ; //@Zengakusyouii
Zengakusyouefu =  'ｆ' ; //@Zengakusyouefu
Zengakusyougii =  'ｇ' ; //@Zengakusyougii
Zengakusyouheiti =  'ｈ' ; //@Zengakusyouheiti
Zengakusyouai =  'ｉ' ; //@Zengakusyouai
Zengakusyoujei =  'ｊ' ; //@Zengakusyoujei
Zengakusyoukei =  'ｋ' ; //@Zengakusyoukei
Zengakusyouelu =  'ｌ' ; //@Zengakusyouelu
Zengakusyouemu =  'ｍ' ; //@Zengakusyouemu
Zengakusyouenu =  'ｎ' ; //@Zengakusyouenu
Zengakusyouoo =  'ｏ' ; //@Zengakusyouoo
Zengakusyoupii =  'ｐ' ; //@Zengakusyoupii
Zengakusyouquu =  'ｑ' ; //@Zengakusyouquu
Zengakusyouarru =  'ｒ' ; //@Zengakusyouarru
Zengakusyouesu =  'ｓ' ; //@Zengakusyouesu
Zengakusyoutexii =  'ｔ' ; //@Zengakusyoutexii
Zengakusyouyuu =  'ｕ' ; //@Zengakusyouyuu
Zengakusyouvui =  'ｖ' ; //@Zengakusyouvui
Zengakusyoudaburyuu =  'ｗ' ; //@Zengakusyoudaburyuu
Zengakusyouekkusu =  'ｘ' ; //@Zengakusyouekkusu
Zengakusyouwai =  'ｙ' ; //@Zengakusyouwai
Zengakusyouzeddo =  'ｚ' ; //@Zengakusyouzeddo
ZengakuHidarinamikakko =  '｛' ; //@ZengakuHidarinamikakko
ZengakuBaatexikarubaa =  '｜' ; //@ZengakuBaatexikarubaa
ZengakuMiginamikakko =  '｝' ; //@ZengakuMiginamikakko



Tyouonhu = //@Tyouonhu
  [\u30FC] //KATAKANA-HIRAGANA PROLONGED SOUND MARK
/ [\uFF70] //HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK
;
Haihun = '-'  //@Haihun
/ [\u2010]
/ [\u2011]
/ [\u2013]
/ [\u2014]
/ [\u2015]
/ [\u2212]
;
Tiruda = '~' //@Tiruda
/ [\u02dc]
/ [\u02F7]
/ [\u2053]
/ [\u223c]
/ [\u301c]
/ [\uFF5E]
;

ひらがな =  [\u3041-\u3094]
Yunikoodo = [\u0041-\u005A] //@Yunikoodo
    / [\u0061-\u007A]
    / [\u00AA]
    / [\u00B5]
    / [\u00BA]
    / [\u00C0-\u00D6]
    / [\u00D8-\u00F6]
    / [\u00F8-\u021F]
    / [\u0222-\u0233]
    / [\u0250-\u02AD]
    / [\u02B0-\u02B8]
    / [\u02BB-\u02C1]
    / [\u02D0-\u02D1]
    / [\u02E0-\u02E4]
    / [\u02EE]
    / [\u037A]
    / [\u0386]
    / [\u0388-\u038A]
    / [\u038C]
    / [\u038E-\u03A1]
    / [\u03A3-\u03CE]
    / [\u03D0-\u03D7]
    / [\u03DA-\u03F3]
    / [\u0400-\u0481]
    / [\u048C-\u04C4]
    / [\u04C7-\u04C8]
    / [\u04CB-\u04CC]
    / [\u04D0-\u04F5]
    / [\u04F8-\u04F9]
    / [\u0531-\u0556]
    / [\u0559]
    / [\u0561-\u0587]
    / [\u05D0-\u05EA]
    / [\u05F0-\u05F2]
    / [\u0621-\u063A]
    / [\u0640-\u064A]
    / [\u0671-\u06D3]
    / [\u06D5]
    / [\u06E5-\u06E6]
    / [\u06FA-\u06FC]
    / [\u0710]
    / [\u0712-\u072C]
    / [\u0780-\u07A5]
    / [\u0905-\u0939]
    / [\u093D]
    / [\u0950]
    / [\u0958-\u0961]
    / [\u0985-\u098C]
    / [\u098F-\u0990]
    / [\u0993-\u09A8]
    / [\u09AA-\u09B0]
    / [\u09B2]
    / [\u09B6-\u09B9]
    / [\u09DC-\u09DD]
    / [\u09DF-\u09E1]
    / [\u09F0-\u09F1]
    / [\u0A05-\u0A0A]
    / [\u0A0F-\u0A10]
    / [\u0A13-\u0A28]
    / [\u0A2A-\u0A30]
    / [\u0A32-\u0A33]
    / [\u0A35-\u0A36]
    / [\u0A38-\u0A39]
    / [\u0A59-\u0A5C]
    / [\u0A5E]
    / [\u0A72-\u0A74]
    / [\u0A85-\u0A8B]
    / [\u0A8D]
    / [\u0A8F-\u0A91]
    / [\u0A93-\u0AA8]
    / [\u0AAA-\u0AB0]
    / [\u0AB2-\u0AB3]
    / [\u0AB5-\u0AB9]
    / [\u0ABD]
    / [\u0AD0]
    / [\u0AE0]
    / [\u0B05-\u0B0C]
    / [\u0B0F-\u0B10]
    / [\u0B13-\u0B28]
    / [\u0B2A-\u0B30]
    / [\u0B32-\u0B33]
    / [\u0B36-\u0B39]
    / [\u0B3D]
    / [\u0B5C-\u0B5D]
    / [\u0B5F-\u0B61]
    / [\u0B85-\u0B8A]
    / [\u0B8E-\u0B90]
    / [\u0B92-\u0B95]
    / [\u0B99-\u0B9A]
    / [\u0B9C]
    / [\u0B9E-\u0B9F]
    / [\u0BA3-\u0BA4]
    / [\u0BA8-\u0BAA]
    / [\u0BAE-\u0BB5]
    / [\u0BB7-\u0BB9]
    / [\u0C05-\u0C0C]
    / [\u0C0E-\u0C10]
    / [\u0C12-\u0C28]
    / [\u0C2A-\u0C33]
    / [\u0C35-\u0C39]
    / [\u0C60-\u0C61]
    / [\u0C85-\u0C8C]
    / [\u0C8E-\u0C90]
    / [\u0C92-\u0CA8]
    / [\u0CAA-\u0CB3]
    / [\u0CB5-\u0CB9]
    / [\u0CDE]
    / [\u0CE0-\u0CE1]
    / [\u0D05-\u0D0C]
    / [\u0D0E-\u0D10]
    / [\u0D12-\u0D28]
    / [\u0D2A-\u0D39]
    / [\u0D60-\u0D61]
    / [\u0D85-\u0D96]
    / [\u0D9A-\u0DB1]
    / [\u0DB3-\u0DBB]
    / [\u0DBD]
    / [\u0DC0-\u0DC6]
    / [\u0E01-\u0E30]
    / [\u0E32-\u0E33]
    / [\u0E40-\u0E46]
    / [\u0E81-\u0E82]
    / [\u0E84]
    / [\u0E87-\u0E88]
    / [\u0E8A]
    / [\u0E8D]
    / [\u0E94-\u0E97]
    / [\u0E99-\u0E9F]
    / [\u0EA1-\u0EA3]
    / [\u0EA5]
    / [\u0EA7]
    / [\u0EAA-\u0EAB]
    / [\u0EAD-\u0EB0]
    / [\u0EB2-\u0EB3]
    / [\u0EBD-\u0EC4]
    / [\u0EC6]
    / [\u0EDC-\u0EDD]
    / [\u0F00]
    / [\u0F40-\u0F6A]
    / [\u0F88-\u0F8B]
    / [\u1000-\u1021]
    / [\u1023-\u1027]
    / [\u1029-\u102A]
    / [\u1050-\u1055]
    / [\u10A0-\u10C5]
    / [\u10D0-\u10F6]
    / [\u1100-\u1159]
    / [\u115F-\u11A2]
    / [\u11A8-\u11F9]
    / [\u1200-\u1206]
    / [\u1208-\u1246]
    / [\u1248]
    / [\u124A-\u124D]
    / [\u1250-\u1256]
    / [\u1258]
    / [\u125A-\u125D]
    / [\u1260-\u1286]
    / [\u1288]
    / [\u128A-\u128D]
    / [\u1290-\u12AE]
    / [\u12B0]
    / [\u12B2-\u12B5]
    / [\u12B8-\u12BE]
    / [\u12C0]
    / [\u12C2-\u12C5]
    / [\u12C8-\u12CE]
    / [\u12D0-\u12D6]
    / [\u12D8-\u12EE]
    / [\u12F0-\u130E]
    / [\u1310]
    / [\u1312-\u1315]
    / [\u1318-\u131E]
    / [\u1320-\u1346]
    / [\u1348-\u135A]
    / [\u13A0-\u13B0]
    / [\u13B1-\u13F4]
    / [\u1401-\u1676]
    / [\u1681-\u169A]
    / [\u16A0-\u16EA]
    / [\u1780-\u17B3]
    / [\u1820-\u1877]
    / [\u1880-\u18A8]
    / [\u1E00-\u1E9B]
    / [\u1EA0-\u1EE0]
    / [\u1EE1-\u1EF9]
    / [\u1F00-\u1F15]
    / [\u1F18-\u1F1D]
    / [\u1F20-\u1F39]
    / [\u1F3A-\u1F45]
    / [\u1F48-\u1F4D]
    / [\u1F50-\u1F57]
    / [\u1F59]
    / [\u1F5B]
    / [\u1F5D]
    / [\u1F5F-\u1F7D]
    / [\u1F80-\u1FB4]
    / [\u1FB6-\u1FBC]
    / [\u1FBE]
    / [\u1FC2-\u1FC4]
    / [\u1FC6-\u1FCC]
    / [\u1FD0-\u1FD3]
    / [\u1FD6-\u1FDB]
    / [\u1FE0-\u1FEC]
    / [\u1FF2-\u1FF4]
    / [\u1FF6-\u1FFC]
    / [\u207F]
    / [\u2102]
    / [\u2107]
    / [\u210A-\u2113]
    / [\u2115]
    / [\u2119-\u211D]
    / [\u2124]
    / [\u2126]
    / [\u2128]
    / [\u212A-\u212D]
    / [\u212F-\u2131]
    / [\u2133-\u2139]
    / [\u2160-\u2183]
    / [\u3005-\u3007]
    / [\u3021-\u3029]
    / [\u3031-\u3035]
    / [\u3038-\u303A]
//    / [\u3041-\u3094]
    / [\u309D-\u309E]
    / [\u30A1-\u30FA]
    / [\u30FC-\u30FE]
    / [\u3105-\u312C]
    / [\u3131-\u318E]
    / [\u31A0-\u31B7]
    / [\u3400-\u4DBF]
    / [\u4E00-\u9FFF]
    / [\uA000-\uA48C]
    / [\uAC00]
    / [\uD7A3]
    / [\uF900-\uFA2D]
    / [\uFB00-\uFB06]
    / [\uFB13-\uFB17]
    / [\uFB1D]
    / [\uFB1F-\uFB28]
    / [\uFB2A-\uFB36]
    / [\uFB38-\uFB3C]
    / [\uFB3E]
    / [\uFB40-\uFB41]
    / [\uFB43-\uFB44]
    / [\uFB46-\uFBB1]
    / [\uFBD3-\uFD3D]
    / [\uFD50-\uFD8F]
    / [\uFD92-\uFDC7]
    / [\uFDF0-\uFDFB]
    / [\uFE70-\uFE72]
    / [\uFE74]
    / [\uFE76-\uFEFC]
    / [\uFF21-\uFF3A]
    / [\uFF41-\uFF5A]
    / [\uFF66-\uFFBE]
    / [\uFFC2-\uFFC7]
    / [\uFFCA-\uFFCF]
    / [\uFFD2-\uFFD7]
    / [\uFFDA-\uFFDC]
    ;
数字 = [\u0030-\u0039\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]
/ [\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]

